name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run backend linting
      run: |
        echo "Running backend linting checks..."
        cd backend
        python -m black --check --diff .
        python -m isort --check-only --diff .
        python -m flake8 .
    
    - name: Run frontend linting
      run: |
        echo "Running frontend linting checks..."
        cd frontend
        npm run lint
        npm run format:check

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and run backend tests
      run: |
        chmod +x test.sh
        ./test.sh --docker --coverage

    - name: Clean up
      if: always()
      run: |
        ./test.sh --clean

  frontend-test:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run unit tests with coverage
      run: |
        cd frontend
        npm test -- --watch=false --browsers=ChromeHeadless --code-coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 18
      with:
        file: frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  cypress-test:
    name: Cypress E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d --build
        echo "Waiting for services to start..."
        sleep 30
    
    - name: Wait for services to be ready
      run: |
        echo "Testing backend health..."
        timeout 60s bash -c 'until curl -f http://localhost:8000/api/auth/login/ -X POST -H "Content-Type: application/json" -d "{\"username\":\"john_doe\",\"password\":\"password123\"}"; do echo "Waiting for backend..."; sleep 5; done'
        echo "Backend is ready!"
        
        echo "Testing frontend..."
        timeout 60s bash -c 'until curl -f http://localhost:8000; do echo "Waiting for frontend..."; sleep 5; done'
        echo "Frontend is ready!"
    
    - name: Seed test data
      run: |
        docker exec grocery-app python manage.py seed_data
    
    - name: Run Cypress E2E tests
      run: |
        cd frontend
        CYPRESS_baseUrl=http://localhost:8000 npm run e2e:fast
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
        retention-days: 7
    
    - name: Clean up Docker containers
      if: always()
      run: |
        docker-compose down -v

  deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, cypress-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build production Docker image
      run: |
        docker build -t grocery-app:latest .
    
    - name: Deploy to Railway (or your preferred platform)
      run: |
        echo "🚀 Ready for deployment!"
        echo "This step would deploy to your production environment"
        echo "Example: Railway, Heroku, AWS, etc."
    
    - name: Notify deployment success
      run: |
        echo "✅ Deployment completed successfully!"

  report:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, cypress-test]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "## 📊 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Status:" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 **Linting**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐍 **Backend Tests**: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- ⚛️ **Frontend Unit Tests**: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🤖 **Cypress E2E Tests**: ${{ needs.cypress-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Reports:" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend coverage available in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Backend coverage from Docker tests" >> $GITHUB_STEP_SUMMARY